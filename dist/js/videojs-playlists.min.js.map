{"version":3,"names":[],"mappings":"","sources":["videojs-playlists.js"],"sourcesContent":["//videojs-playlists.js\nfunction playList(options, arg) {\n    var player = this;\n    player.pl = player.pl || {};\n    var index = parseInt(options, 10);\n\n    player.pl._guessVideoType = function(video) {\n        var videoTypes = {\n            'webm': 'video/webm',\n            'mp4': 'video/mp4',\n            'ogv': 'video/ogg'\n        };\n        var extension = video.split('.').pop();\n\n        return videoTypes[extension] || '';\n    };\n\n    player.pl.init = function(videos, options) {\n        options = options || {};\n        player.pl.videos = [];\n        player.pl.current = 0;\n        player.on('ended', player.pl._videoEnd);\n\n        if (options.getVideoSource) {\n            player.pl.getVideoSource = options.getVideoSource;\n        }\n\n        player.pl._addVideos(videos);\n    };\n\n    player.pl._updatePoster = function(posterURL) {\n        player.poster(posterURL);\n        player.removeChild(player.posterImage);\n        player.posterImage = player.addChild(\"posterImage\");\n    };\n\n    player.pl._addVideos = function(videos) {\n        for (var i = 0, length = videos.length; i < length; i++) {\n            var aux = [];\n            for (var j = 0, len = videos[i].src.length; j < len; j++) {\n                aux.push({\n                    type: player.pl._guessVideoType(videos[i].src[j]),\n                    src: videos[i].src[j]\n                });\n            }\n            videos[i].src = aux;\n            player.pl.videos.push(videos[i]);\n        }\n    };\n\n    player.pl._nextPrev = function(func) {\n        var comparison, addendum;\n\n        if (func === 'next') {\n            comparison = player.pl.videos.length - 1;\n            addendum = 1;\n        } else {\n            comparison = 0;\n            addendum = -1;\n        }\n\n        if (player.pl.current !== comparison) {\n            var newIndex = player.pl.current + addendum;\n            player.pl._setVideo(newIndex);\n            player.trigger(func, [player.pl.videos[newIndex]]);\n        }\n    };\n\n    player.pl._setVideo = function(index) {\n        if (index < player.pl.videos.length) {\n            player.pl.current = index;\n            player.pl.currentVideo = player.pl.videos[index];\n\n            if (!player.paused()) {\n                player.pl._resumeVideo();\n            }\n\n            if (player.pl.getVideoSource) {\n                player.pl.getVideoSource(player.pl.videos[index], function(src, poster) {\n                    player.pl._setVideoSource(src, poster);\n                });\n            } else {\n                player.pl._setVideoSource(player.pl.videos[index].src, player.pl.videos[index].poster);\n            }\n        }\n    };\n\n    player.pl._setVideoSource = function(src, poster) {\n        player.src(src);\n        player.pl._updatePoster(poster);\n    };\n\n    player.pl._resumeVideo = function() {\n        player.one('loadstart', function() {\n            player.play();\n        });\n    };\n\n    player.pl._videoEnd = function() {\n        if (player.pl.current === player.pl.videos.length - 1) {\n            player.trigger('lastVideoEnded');\n        } else {\n            player.pl._resumeVideo();\n            player.next();\n        }\n    };\n\n    if (options instanceof Array) {\n        player.pl.init(options, arg);\n        player.pl._setVideo(0);\n        return player;\n    } else if (index === index) { // NaN\n        player.pl._setVideo(index);\n        return player;\n    } else if (typeof options === 'string' && typeof player.pl[options] !== 'undefined') {\n        player.pl[options].apply(player);\n        return player;\n    }\n}\n\nvideojs.Player.prototype.next = function() {\n    this.pl._nextPrev('next');\n    return this;\n};\nvideojs.Player.prototype.prev = function() {\n    this.pl._nextPrev('prev');\n    return this;\n};\n\nvideojs.plugin('playList', playList);\n\n\n(function() {\n    var videos = [{\n            src: [\n                'http://demo.dealerpro.net/Images/Sites/577/videos/HondaHands.mp4'\n            ],\n            poster: '',\n            title: 'Honda. The Power of Dreams.'\n        },\n        {\n            src: [\n                'http://1eb9cddbb30a65a675d4-91fe7d858d3e9c59dcdfd3e789416fbc.r56.cf1.rackcdn.com/Sites/577/commercial.mp4'\n            ],\n            poster: '',\n            title: 'Thanks for Making Us #1'\n        }\n    ];\n\n\n    var demoModule = {\n        init: function() {\n            this.els = {};\n            this.cacheElements();\n            this.initVideo();\n            this.createListOfVideos();\n            this.bindEvents();\n            this.overwriteConsole();\n        },\n        overwriteConsole: function() {\n            console._log = console.log;\n            console.log = this.log;\n        },\n        log: function(string) {\n            demoModule.els.log.append('<p>' + string + '</p>');\n            console._log(string);\n        },\n        cacheElements: function() {\n            this.els.$playlist = $('div.playlist > ul');\n            this.els.$next = $('#next');\n            this.els.$prev = $('#prev');\n            this.els.log = $('div.panels > pre');\n        },\n        initVideo: function() {\n            this.player = videojs('video');\n            this.player.playList(videos);\n        },\n        createListOfVideos: function() {\n            var html = '';\n            for (var i = 0, len = this.player.pl.videos.length; i < len; i++) {\n                html += '<li data-videoplaylist=\"' + i + '\">' +\n                    '<span class=\"number\">' + (i + 1) + '</span>' +\n                    '<span class=\"poster\"><img src=\"' + videos[i].poster + '\"></span>' +\n                    '<span class=\"title\">' + videos[i].title + '</span>' +\n                    '</li>';\n            }\n            this.els.$playlist.empty().html(html);\n            this.updateActiveVideo();\n        },\n        updateActiveVideo: function() {\n            var activeIndex = this.player.pl.current;\n\n            this.els.$playlist.find('li').removeClass('active');\n            this.els.$playlist.find('li[data-videoplaylist=\"' + activeIndex + '\"]').addClass('active');\n        },\n        bindEvents: function() {\n            var self = this;\n            this.els.$playlist.find('li').on('click', $.proxy(this.selectVideo, this));\n            this.els.$next.on('click', $.proxy(this.nextOrPrev, this));\n            this.els.$prev.on('click', $.proxy(this.nextOrPrev, this));\n            this.player.on('next', function(e) {\n                console.log('Next video');\n                self.updateActiveVideo.apply(self);\n            });\n            this.player.on('prev', function(e) {\n                console.log('Previous video');\n                self.updateActiveVideo.apply(self);\n            });\n            this.player.on('lastVideoEnded', function(e) {\n                console.log('Last video has finished');\n            });\n        },\n        nextOrPrev: function(e) {\n            var clicked = $(e.target);\n            this.player[clicked.attr('id')]();\n        },\n        selectVideo: function(e) {\n            var clicked = e.target.nodeName === 'LI' ? $(e.target) : $(e.target).closest('li');\n\n            if (!clicked.hasClass('active')) {\n                console.log('Selecting video');\n                var videoIndex = clicked.data('videoplaylist');\n                this.player.playList(videoIndex);\n                this.updateActiveVideo();\n            }\n        }\n    };\n\n    demoModule.init();\n})(jQuery);"],"file":"videojs-playlists.min.js","sourceRoot":"/source/"}